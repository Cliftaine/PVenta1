/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pventa;

import java.awt.Color;
import java.sql.SQLException;
import java.text.DecimalFormat;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author jahziel
 */
public class venta extends javax.swing.JPanel {

    /**
     * Creates new form venta
     */
     // Constantes para las Columnas
    static final int intCodigo = 0;
    static final int intNombre = 1;
    static final int intPrecio = 2;
    static final int intCantidad = 3;
    static final int intImporte = 4;
    static final int intExistencia = 5;
    static final int intCosto = 6;
    
    // Constantes para las Columnas
    static final int intEmpresa = 0;
    static final int intSucursal = 1;
    static final int intDireccion = 2;

    
    static final int INT_KEY_LF = 10;
    static final int INT_KEY_RETURN = 13;
    static final int INT_KEY_F1 = 112;
    
    //static String lblUtilidad = "0";
    //mis variables
    dbCon con = new dbCon();
    misFunciones miFun = new misFunciones();
    
    // Variable para la operación de la venta
    boolean bAgruparProductos;
    boolean bExistencias;  
    String  strTikect;
    String fecha;
    
    public venta() {
        initComponents();
        lblUtilidad.setText("0.00");
        lblUtilidad.setVisible(false);
        formatoTabla();
        inicializar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaVenta = new javax.swing.JTable();
        bBuscar = new javax.swing.JButton();
        txtCodigo = new javax.swing.JTextField();
        txtPago = new javax.swing.JLabel();
        txtTotalPro = new javax.swing.JLabel();
        txtVenta = new javax.swing.JLabel();
        lTicket = new javax.swing.JLabel();
        bCobrar = new javax.swing.JButton();
        bImprimir = new javax.swing.JButton();
        lblUtilidad = new javax.swing.JLabel();

        tablaVenta = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        tablaVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaVenta.setFocusable(false);
        tablaVenta.getTableHeader().setReorderingAllowed(false);
        tablaVenta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablaVentaMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tablaVenta);

        bBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icon-search.png"))); // NOI18N
        bBuscar.setText("Buscar");
        bBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarActionPerformed(evt);
            }
        });

        txtCodigo.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        txtCodigo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Código de barras"));
        txtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodigoKeyPressed(evt);
            }
        });

        txtPago.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        txtPago.setText("CERO PESOS");
        txtPago.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Importe a pagar"));

        txtTotalPro.setFont(new java.awt.Font("Ubuntu", 1, 36)); // NOI18N
        txtTotalPro.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtTotalPro.setText("0");
        txtTotalPro.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Productos"));

        txtVenta.setFont(new java.awt.Font("Ubuntu", 1, 36)); // NOI18N
        txtVenta.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtVenta.setText("0.00");
        txtVenta.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Total de la venta"));
        txtVenta.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtVentaPropertyChange(evt);
            }
        });

        lTicket.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        lTicket.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lTicket.setText("0");
        lTicket.setBorder(javax.swing.BorderFactory.createTitledBorder("Ticket"));

        bCobrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/money_bag_filled-50.png"))); // NOI18N
        bCobrar.setText("Cobrar");
        bCobrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCobrarActionPerformed(evt);
            }
        });

        bImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/print_filled-50.png"))); // NOI18N
        bImprimir.setText("Imprimir Ticket");

        lblUtilidad.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCodigo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bImprimir))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtPago, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTotalPro, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bCobrar, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblUtilidad)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bBuscar)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bImprimir))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTotalPro, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(bCobrar))
                    .addComponent(txtPago, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblUtilidad)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoKeyPressed
        // TODO add your handling code here:
         if (evt.getKeyCode()==INT_KEY_LF)
        {
            // Valido que voy a agrupar productos
            if (bAgruparProductos)
            {    
               if (!fnProductoEnVenta())
                   sbProductoAgrega();
            }
            else       
               // Valida el Producto
               sbProductoAgrega();
            
            // Consume el caracter
            evt.consume();
        }
        
        // Verifica return
        if (evt.getKeyCode()==INT_KEY_RETURN)
        {
            if (bAgruparProductos)
            {    
               if (!fnProductoEnVenta())
                  sbProductoAgrega();
            }
            else       
               // Valida el Producto
              sbProductoAgrega();
            
            // Consume el caracter
            evt.consume();
        }

    }//GEN-LAST:event_txtCodigoKeyPressed

    private void bBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarActionPerformed
        // TODO add your handling code here:
         // Inicializa el dato de consulta
            varGlobales.sDato ="";
            
            // Coloca el Query de la Consulta
            dbCon.sqlString ="select CodBarras as Codigo, Nombre as Nombre from Productos";
            
            // Declaro una variable instancia de la forma de consulta
            Inventariob frmCodigos = new Inventariob(null,true);
            frmCodigos.setTitle("Consulta de Códigos");            
            frmCodigos.setVisible(true);
            
            // Despliega el Dato Seleccionado
            txtCodigo.setText(varGlobales.sDato);
            
            if (bAgruparProductos)
            {    
               if (!fnProductoEnVenta())
                   sbProductoAgrega();
            }
            else       
               // Valida el Producto
               sbProductoAgrega();
        
    }//GEN-LAST:event_bBuscarActionPerformed

    private void txtVentaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtVentaPropertyChange
        // TODO add your handling code here:
        String sEntero;
        String sDecimal;
        int iLongitud;
        int iEntero;
        
        // Obtengo la Longitud
        iLongitud = txtVenta.getText().length();
        
        // Obtengo la parte entera
        sEntero = txtVenta.getText().substring(0,iLongitud-3);
        iEntero = Integer.valueOf(sEntero.trim());
        
        // Obtengo la parte decimal
        sDecimal = txtVenta.getText().substring(iLongitud-2)+"/100 M.N.";
        txtPago.setText(miFun.getStringOfNumber(iEntero)+ " PESOS "+sDecimal);

    }//GEN-LAST:event_txtVentaPropertyChange

    private void tablaVentaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaVentaMousePressed
        // TODO add your handling code here:
        int iProductos;
        int iRow;
        int iCantidad;
        int iTotalProd;
        double dImporte;
        double dVenta;
        double decTotal;
        double decUtilidad;
        String sCantidad;
        String sImporte;
        String sCosto;
        String sPrecio;
        
        if(evt.getClickCount()== 2){

        
        // Variable para formato
        DecimalFormat formateador = new DecimalFormat("####.00");
                 
        // Obtiene la Cantidad y el Precio para disminuir del importe
        // y del Total
        iRow = tablaVenta.getSelectedRow();

        // Variable para el modelo de la tabla  
        DefaultTableModel tblDatos = (DefaultTableModel) tablaVenta.getModel();
        
        // Obtengo el precio la cantidad el importe y el costo
        sPrecio = tblDatos.getValueAt(iRow,intPrecio).toString();           
        sCantidad = tblDatos.getValueAt(iRow,intCantidad).toString();           
        sImporte =  tblDatos.getValueAt(iRow,intImporte).toString();     
        sCosto = tblDatos.getValueAt(iRow,intCosto).toString();     
        iTotalProd = Integer.valueOf(txtTotalPro.getText());
        
        if(Integer.valueOf(sCantidad) > 1){
            iProductos = Integer.valueOf(sCantidad) - 1;
            tablaVenta.getModel().setValueAt(iProductos,iRow, intCantidad);
            iTotalProd = iTotalProd -1;
            txtTotalPro.setText(String.valueOf(iTotalProd));
            
            dImporte = iProductos * Double.valueOf(sPrecio);
            tablaVenta.getModel().setValueAt(dImporte,iRow, intImporte);
            
            dVenta = Double.valueOf(txtVenta.getText()) - Double.valueOf(sPrecio);
            txtVenta.setText(formateador.format(dVenta));
            
            decUtilidad = Double.valueOf(lblUtilidad.getText()) - ((Double.valueOf(sPrecio) - Double.valueOf(sCosto)) *  Double.valueOf(sCantidad));                    


        }else{
            iProductos = Integer.valueOf(txtTotalPro.getText()) - Integer.valueOf(sCantidad) ;
            txtTotalPro.setText(String.valueOf(iProductos));

            // El Total
            decTotal = Double.valueOf(txtVenta.getText()) - Double.valueOf(sImporte);                    
            decUtilidad = Double.valueOf(lblUtilidad.getText()) - ((Double.valueOf(sPrecio) - Double.valueOf(sCosto)) *  Double.valueOf(sCantidad));                    
        
            // Este if valida que no sea 0 la cantidad
            if (iProductos>0)
            {
                txtVenta.setText(formateador.format(decTotal));
                lblUtilidad.setText(formateador.format(decUtilidad));
            }
           
            else
            {
                txtVenta.setText("0.00"); 
                lblUtilidad.setText("0.00"); 
            }           

            // Elimina el Row
            tblDatos.removeRow(iRow);           
            tablaVenta.setModel(tblDatos);   

            }
        }
        // Actualiza el Numero de Productos

        
    }//GEN-LAST:event_tablaVentaMousePressed

    private void bCobrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCobrarActionPerformed
        // TODO add your handling code here:
        if(txtTotalPro.getText().equals("0")){
            JOptionPane.showMessageDialog(null, "Capture un producto","Duran Gourmet",JOptionPane.INFORMATION_MESSAGE);                
    
        }else{
            varGlobales.sTotalVenta = txtVenta.getText();
            varGlobales.bVentaRealizada=false;
            varGlobales.sReferencia="";
            varGlobales.sFormaPago="";
            

            // Crea la instancia de la Forma
            Cobrar frmCobro = new Cobrar(null,true);
            
            // Coloca los datos
            frmCobro.setVisible(true);
            
            if (varGlobales.bVentaRealizada){
                sbGrabaVenta();
            }else{
                inicializar();
                }
                
        }
    }//GEN-LAST:event_bCobrarActionPerformed


    private void formatoTabla(){
        DefaultTableModel modelo = new DefaultTableModel();
         
        modelo.addColumn("Codigo");//0
        modelo.addColumn("Nombre");//1
        modelo.addColumn("Precio");//2
        modelo.addColumn("Cantidad");//3
        modelo.addColumn("Importe");//4
        modelo.addColumn("Existencia");//5
        modelo.addColumn("Costo");//6
        
        tablaVenta.setModel(modelo);
        
        tablaVenta.getColumn("Codigo").setPreferredWidth(150);
        tablaVenta.getColumn("Nombre").setPreferredWidth(450);
        
        DefaultTableCellRenderer cAlinear = new DefaultTableCellRenderer();
        
        cAlinear.setHorizontalAlignment(SwingConstants.RIGHT);
        
        tablaVenta.getColumnModel().getColumn(2).setCellRenderer(cAlinear);
        tablaVenta.getColumnModel().getColumn(3).setCellRenderer(cAlinear);
        tablaVenta.getColumnModel().getColumn(4).setCellRenderer(cAlinear);
        tablaVenta.getColumnModel().getColumn(5).setCellRenderer(cAlinear);
        tablaVenta.getColumnModel().getColumn(6).setCellRenderer(cAlinear);
        
        //tablaVenta.removeColumn(tablaVenta.getColumnModel().getColumn(6));
        tablaVenta.removeColumn(tablaVenta.getColumnModel().getColumn(6));

    }
    
    private void inicializar(){
        txtCodigo.requestFocus();
        Date dHoy = new Date();
        SimpleDateFormat dFecha = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        fecha = dFecha.format(dHoy);
        lTicket.setText(String.format("%d", ObtFolioVenta()));
        verParametros();
    }
    
    private int ObtFolioVenta(){
        int iRes = 0;
        String sQuery;
        
        sQuery = "SELECT FVenta FROM Folios";
        
        con.ExeQuery(sQuery);
        
        try {
            if(con.sqlRes.next()){
                iRes = con.sqlRes.getInt("FVenta");
                //JOptionPane.showMessageDialog(null, "Aqui","Duran Gourmet",JOptionPane.INFORMATION_MESSAGE);                

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString(),"Duran Gourmet",JOptionPane.INFORMATION_MESSAGE);                
                //JOptionPane.showMessageDialog(null, "Aqui2","Duran Gourmet",JOptionPane.INFORMATION_MESSAGE);                
        
        }
        return iRes;
    }
    
    private void verParametros(){
        String sQuery;
        
        sQuery = "SELECT * FROM Parametros";
        
        con.ExeQuery(sQuery);
        
        try {
            if(con.sqlRes.next()){
                if(con.sqlRes.getInt("AgrupProd") == 1){
                    bAgruparProductos = true;
                }else{
                    bAgruparProductos = false;
                }
                
                if(con.sqlRes.getInt("VeriExistencia") == 1){
                    bExistencias = true;
                }else{
                    bExistencias = false;
                }
                
                strTikect = con.sqlRes.getString("TicketInfoFinal");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error:"+e.toString());
        }
    }
    
     private boolean fnProductoEnVenta()
    {
        // Variables para Fila y Columns
        int fil;
        String sDato;
        String sPrecio;
        String sCantidad;
        String sCosto;
        boolean bResult=false;
        int iProductos ;
        double decTotal;
        double decUtilidad;
        
        // Variable para formato
        DecimalFormat formateador = new DecimalFormat("####.00");
       
        
        // Pasa a mayúsculas
        sDato = txtCodigo.getText().trim().toUpperCase();
        
        if (!sDato.isEmpty())
        {            

            // Ciclo para buscar en la Venta
            for(fil = 0; fil < tablaVenta.getRowCount();fil++)
            {
                //Obtiene dato contenido en una celda de la tabla
                String value = (String)tablaVenta.getValueAt(fil, intCodigo);
                
                // lo pasa a Mayúsculas
                value = value.toUpperCase();

                // Aqui verifica si encuentra el dato
                //if(value.lastIndexOf(sDato)>=0)
                if(sDato.equals(value))
                {     
                    //JOptionPane.showMessageDialog(null, "Aqui "+value.lastIndexOf(sDato)+"  "+sDato+" "+value);
                    // Obtengo la Cantidad y el Precio
                    sCantidad = tablaVenta.getModel().getValueAt(fil,intCantidad).toString();
                    sPrecio = tablaVenta.getModel().getValueAt(fil,intPrecio).toString();
                    sCosto = tablaVenta.getModel().getValueAt(fil,intCosto).toString();

                    // Cantidad
                    iProductos = Integer.valueOf(sCantidad) + 1;
                    tablaVenta.getModel().setValueAt(iProductos,fil, intCantidad);
                    
                    // Productos
                    iProductos = Integer.valueOf(txtTotalPro.getText()) + 1;
                    txtTotalPro.setText(String.valueOf(iProductos));

                    // Importe en la Venta
                    decTotal = Double.valueOf(sPrecio)*(Integer.valueOf(sCantidad)+1);    
                    tablaVenta.getModel().setValueAt(formateador.format(decTotal),fil,intImporte);
                    
                    // El Total
                    decTotal = Double.valueOf(txtVenta.getText()) + Double.valueOf(sPrecio);                    
                    txtVenta.setText(formateador.format(decTotal));

                    // lA UTILIDAD
                    decUtilidad = Double.valueOf(lblUtilidad.getText()) + Double.valueOf(sPrecio) - Double.valueOf(sCosto);                    
                    lblUtilidad.setText(formateador.format(decUtilidad));

                    // Inicializa el Código
                    txtCodigo.setText(null);
                    txtCodigo.setForeground(Color.black);
                    bResult = true;
                }

            }    
        }
        
        
        
        // Retorna el Valor
        return bResult;
        
        
    }
     
     public void sbProductoAgrega()
    {
         // Para el Total
        double decTotal;
        double decCosto;
        double decPrecio;
        double decUtilidad;
        boolean bContinua = true;
         // Para el Número de Artículos
        int iProductos;
        
        
        // Variable para formato
        DecimalFormat formateador = new DecimalFormat("####.00");        
       
        // Variable para el modelo de la tabla
        DefaultTableModel tblDatos = (DefaultTableModel) tablaVenta.getModel();

        // Prepara los datos vacios iniciales
        Object [] oFila = new Object[10];
        
        // Para el Query
        String sQuery;
        
        // Valida que haya algo en el Codigo
        if (! txtCodigo.getText().trim().isEmpty())
        {
            // Prepara el Query
            sQuery  = "Select * from Productos Where CodBarras='"+txtCodigo.getText()+"'";
            //JOptionPane.showMessageDialog(null, sQuery);
            //Ejecuta el Query
            con.ExeQuery(sQuery);

            // Capturo el Error
            try {
                // Verifico que haya habido resultados
                if (con.sqlRes.next())
                {
                    
                    // Verifica si checa existencias
                    if (bExistencias)
                    {
                        // Verifica existencias
                        if (con.sqlRes.getInt("Actual")<=0)
                        {
                           // oFunc.SubSistemaMensaje("Producto Sin Existencia");
                            txtCodigo.setForeground(Color.red);
                            bContinua=false;
                        }
                    }   
                    if (bContinua)
                    {
                    
                        // Obtengo los datos en el Objeto Fila
                        oFila[intCodigo]=con.sqlRes.getString("CodBarras");
                        oFila[intNombre]=con.sqlRes.getString("Nombre");
                        oFila[intPrecio]=con.sqlRes.getString("Precio");
                        oFila[intCantidad]="1";
                        oFila[intImporte]=con.sqlRes.getString("Precio");
                        oFila[intExistencia]=con.sqlRes.getString("Actual");
                        oFila[intCosto]=con.sqlRes.getString("Costo");


                        // Obtengo valores de Precio y Costo
                        decPrecio = con.sqlRes.getDouble("Precio");
                        decCosto = con.sqlRes.getDouble("Costo");

                        // Agrega el Dato
                        //tblDatos.addRow(oFila);
                        tblDatos.insertRow(0, oFila);                       

                        // Coloca el Modelo de Nueva Cuenta
                        tablaVenta.setModel(tblDatos);
                        txtCodigo.setForeground(Color.black);

                        // Limpia el código al final
                        txtCodigo.setText(null);

                        // Productos
                        iProductos = Integer.valueOf(txtTotalPro.getText()) + 1;
                        txtTotalPro.setText(String.valueOf(iProductos));

                        // El Total
                        decTotal = Double.valueOf(txtVenta.getText()) + Double.valueOf(con.sqlRes.getString("Precio"));
                        txtVenta.setText(formateador.format(decTotal));

                        // La Utilidad
                        decUtilidad = Double.valueOf(lblUtilidad.getText()) + decPrecio - decCosto;
                        lblUtilidad.setText(formateador.format(decUtilidad));

                    }
                }
                else 
                {
                    //oFunc.SubSistemaMensaje("Producto No Existe");
                    JOptionPane.showMessageDialog(null, "Producto no Existe");
                    txtCodigo.setForeground(Color.red);
                }

                // Cierro los Resultados
                con.sqlRes.close();

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error:"+ex.toString());
                //oFunc.SubSistemaMensaje("sbProductoAgrega:"+ex.getMessage().toString());
            }
        }       
        
    }
     
     private void sbGrabaVenta()
    {
        
        // Obtengo la fecha y hora de nueva cuenta
        Date dateHoy = new Date();
        String fecha;
        // Variable para dar formato
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        
        // Inicializa Folio y Fecha
        //btnFecha.setText(formato.format(dateHoy));
        fecha = formato.format(dateHoy);
        // Coloca el Folio de Nueva Cuenta
        lTicket.setText(String.valueOf(ObtFolioVenta()));
        
        // Para controlar la Transacción
        boolean bCommit=false;
        
        // Inicia la transacción colocando el commit a false
        con.SubAutoCommit(false);
        
        // Intenta ejecutar cada uno de los procesos
        if (fnBoolGrabaVentaEncabezado())
            if (fnBoolGrabaVentaDetalle())
                if (fnBoolActualizaFolioVenta())
                    bCommit = true;
        
        // Verifica si debe hacer commit
        if (bCommit)
        {
            // Realiza la confirmación de la transaccion
            con.SubCommit();
            //if (bMensajesExito)
                //oFunc.SubSistemaMensaje("Se ha grabado el Folio:"+spnTicket.getValue().toString()+"  Correctamente");
        }
        else
            con.SubRollBack();

        // Inicializa despues de grabar
        inicializar();
        
    }

    private String obtenerFormapago(){
        String FPago = "";
        String sQuery;
        
        sQuery = "SELECT idFPago FROM FPago WHERE Descripcion='";
        sQuery += varGlobales.sFormaPago+"'";
        
        con.ExeQuery(sQuery);
        try {
            if(con.sqlRes.next()){
                FPago = con.sqlRes.getString("idFPago");
        }    
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error:"+e.toString());    
        }
        return FPago;
    }
     
    private boolean fnBoolGrabaVentaEncabezado()
    {
        
        Date dateHoy = new Date();
        String fecha;
        // Variable para dar formato
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        
        // Inicializa Folio y Fecha
        //btnFecha.setText(formato.format(dateHoy));
        fecha = formato.format(dateHoy);
        // Para los resultados
        boolean bResult = false;
                
        // Para la sentencia Sql
        String strSqlStmt; 
        String FPago = obtenerFormapago();
        // Query para actualizar el Folio
        strSqlStmt = "INSERT INTO Ventas ";
        strSqlStmt = strSqlStmt + "(idVenta,";
	strSqlStmt = strSqlStmt + "FechaVenta,";
	strSqlStmt = strSqlStmt + "VentaProducto,";
	strSqlStmt = strSqlStmt + "Importe,";
	strSqlStmt = strSqlStmt + "Utilidad,";
	strSqlStmt = strSqlStmt + "idFPago,";
	//strSqlStmt = strSqlStmt + "idCancelada,";
	strSqlStmt = strSqlStmt + "Referencia)";
        strSqlStmt = strSqlStmt + "Values ";        
        //strSqlStmt = strSqlStmt + "("+String.valueOf(fnIntGetFolioVenta())+",";    //ojo    
        strSqlStmt = strSqlStmt + "("+lTicket.getText()+",";    //ojo    
        strSqlStmt = strSqlStmt + "'"+fecha+"',";
        strSqlStmt = strSqlStmt + txtTotalPro.getText()+",";
        strSqlStmt = strSqlStmt + txtVenta.getText()+",";
        // La utilidad esta desplegada momentaneamente en la forma de pago
        strSqlStmt = strSqlStmt + lblUtilidad.getText()+","; 
        strSqlStmt = strSqlStmt + "'"+FPago+"',"; 
        //strSqlStmt = strSqlStmt + "'',"; 
        strSqlStmt = strSqlStmt + "'"+varGlobales.sReferencia+"')"; 
        
        // Ejecuta la Sentencia
        if (con.UpdateQuery(strSqlStmt))
            bResult = true;
        
        // Retorna el Valor
        return bResult;
        
        
    }
    
    
    private String obtenerCodigo(String Cod){
        String sCodigo = "";
        String sQuery;
        
        sQuery = "SELECT idProducto FROM Productos WHERE CodBarras='";
        sQuery += Cod+"'";
        con.ExeQuery(sQuery);
        try {
            if(con.sqlRes.next()){
                sCodigo = con.sqlRes.getString("idProducto");
            }    
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e,"Duran Gourmet",JOptionPane.INFORMATION_MESSAGE);    
        }
        
        return sCodigo;
    }
    
    private String obtenerUsuario(String nom, String ape){
        String sQuery;
        String usr = "";
        
        sQuery = "SELECT idUsuario FROM Usuarios WHERE Nombre ='"+nom + "'"+ " and Apellido='"+ape+"'";
        
        con.ExeQuery(sQuery);
        try {
            if(con.sqlRes.next()){
                usr = con.sqlRes.getString("idUsuario");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e,"Duran Gourmet",JOptionPane.INFORMATION_MESSAGE);
        }
        
        return usr;
        
    }
    
    private boolean fnBoolGrabaVentaDetalle()
    {
        // Para los resultados
        boolean bResult = true;
        
        // Variable para las filas de la Tabla de Productos
        int iFila;
        
        // Variables para los diferentes datos
        String sCodigo, sNombre, sPrecio, sCantidad, sCosto;
        String obtCodigo;
        String usr = obtenerUsuario(varGlobales.sNombre,varGlobales.sApellido);
        // Para la sentencia Sql
        String strSqlStmt; // Para el Query
        
        // Ciclo para grabar el detalle de la venta
        for(iFila = 0; iFila < tablaVenta.getRowCount();iFila++)
        {
            //Obtiene dato contenido en una celda de la tabla
                       
            sCodigo = tablaVenta.getModel().getValueAt(iFila, intCodigo).toString();
            sNombre = tablaVenta.getModel().getValueAt(iFila, intNombre).toString();
            sPrecio = tablaVenta.getModel().getValueAt(iFila, intPrecio).toString();
            sCantidad = tablaVenta.getModel().getValueAt(iFila, intCantidad).toString();
            sCosto = tablaVenta.getModel().getValueAt(iFila, intCosto).toString();            
           
            // Actualiza la Existencia del Producto
            if (fnBoolActualizaExistenciaSalida(sCodigo,sCantidad,false)) 
                if (fnBoolRegistraMovimiento(sCodigo, sCantidad,false))
                {
                    obtCodigo = obtenerCodigo(sCodigo);
                    // Prepara Query para grabar venta detalle
                    strSqlStmt = " INSERT INTO VentasDetalle ";
                    strSqlStmt = strSqlStmt + "(idNuVenta,";
                    strSqlStmt = strSqlStmt + " idProducto,";
                    strSqlStmt = strSqlStmt + " VentaCantidad,";
                    strSqlStmt = strSqlStmt + " Costo,";
                    strSqlStmt = strSqlStmt + " Precio,";
                    strSqlStmt = strSqlStmt + " idUsuario,";
                    strSqlStmt = strSqlStmt + " EmpleCancel)";
                    strSqlStmt = strSqlStmt + " Values (";
                    strSqlStmt = strSqlStmt + lTicket.getText()+",";
                    strSqlStmt = strSqlStmt + "'"+obtCodigo+"',";
                    strSqlStmt = strSqlStmt + sCantidad+",";
                    strSqlStmt = strSqlStmt + sCosto+",";
                    strSqlStmt = strSqlStmt + sPrecio+",";
                    strSqlStmt = strSqlStmt + usr+",";
                    strSqlStmt = strSqlStmt + sPrecio+")";
            //JOptionPane.showMessageDialog(null, strSqlStmt,"Duran Gourmet",JOptionPane.INFORMATION_MESSAGE);
                    
                    // Ejecuta la Sentencia
                    if ( ! con.UpdateQuery(strSqlStmt))
                    {
                        bResult = false;
                        break;
                    }
                    
                }
                else
                    break;
            else            
                break;
            
        }     
        
        // Retorna el Valor
        return bResult;
        
    }
    
    private boolean fnBoolActualizaExistenciaSalida(String sCod, String sCan, boolean bCancel)
    {
        
        // Variable de Retorno
        boolean bResult = false;
       
        // Query
        String sQuery;
        
        
        // Prepara el Query para ejecutar la actualización
        
        if (! bCancel)
        {
            sQuery = "UPDATE Productos SET Salida = Salida  + " + sCan + ",";
            sQuery = sQuery + " Actual = Actual - "+sCan;
        }
        else
        {
            sQuery = "UPDATE Productos Set Salida = Salida  - " + sCan + ",";
            sQuery = sQuery + " Actual = Actual + "+sCan;
        }
        
        // Condiciona Sentencia de acuerdo al producto
        sQuery = sQuery + " WHERE CodBarras='"+sCod+"'";
        
        // Ejecuta la Sentencia
        if (con.UpdateQuery(sQuery))
            bResult = true;
        
        // Retorna el Resultado
        return bResult;
       
    }
    
    private String obtenerMovimiento(String Mov){
        String sMovimiento = "";
        String sQuery;
        
        sQuery = "SELECT idMovimiento FROM Movimientos WHERE Descripcion ='";
        sQuery += Mov + "'";

        con.ExeQuery(sQuery);
        try {
            if(con.sqlRes.next()){
                sMovimiento = con.sqlRes.getString("idMovimiento");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e,"Duran Gourmet",JOptionPane.INFORMATION_MESSAGE);

        }
        return sMovimiento;
    }
    
    
    private boolean fnBoolRegistraMovimiento(String sCod,String sCan,boolean bCancel)
    {
        
        
        Date dateHoy = new Date();
        String fecha;
        String Mov;
        String obtCod;
        // Variable para dar formato
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        
        // Inicializa Folio y Fecha
        //btnFecha.setText(formato.format(dateHoy));
        fecha = formato.format(dateHoy);
        // Declara la variable de resultados
        boolean bResult=false;
        
        // para el Folio del Inventario
        String sFolioInventario;
        
        // Query
        String sQuery;
        
        // Obtengo el Folio del Inventario
        sFolioInventario = String.valueOf(ObtFolioVenta());
        obtCod = obtenerCodigo(sCod);
        
        // Prepara el Query para ejecutar la actualización
        sQuery = "INSERT INTO Inventarios";
        //sQuery = "Insert into catInventarios (intInvFolio,strInvMovimiento,";
        //sQuery += "datInvFecha,intInvCantidad,strProductoCodigo,intVentaFolio,txtInvDescripcion)";
        sQuery += " Values ("+sFolioInventario+",";

        // Verifica si es cancelación para colocarlo como salida o entrada
        if (! bCancel){
            Mov= obtenerMovimiento("Salida");
            sQuery += Mov+",";
        }
                        
        else{
            Mov= obtenerMovimiento("Entrada");
            sQuery += Mov+",";
        }
                        
        // La fecha
        sQuery += "'"+fecha+"',";
        sQuery += sCan+",";
        sQuery += "'"+obtCod+"',";
        sQuery += lTicket.getText()+",";
        if (! bCancel)
            sQuery += "'Salida por Venta')";
        else
            sQuery += "'Entrada por Cancelación de Venta')";
       
        
        //JOptionPane.showMessageDialog(null, sQuery);
        // Ejecuta la Sentencia
        if (con.UpdateQuery(sQuery))
            if (fnBoolActualizaFolioInventario())
                bResult = true;
        
        // Retorna el resultado
        return bResult;
        
    }
    
    private boolean fnBoolActualizaFolioInventario()
    {
        // Para controlar el Resultado
        boolean bResult = false;
        
        // Para la sentencia Sql
        String strSqlStmt; // Para el Query
        
        // Query para actualizar el Folio
        strSqlStmt = "UPDATE Folios SET FInventario = FVenta + 1";
        
        // Ejecuta la Sentencia
        if (con.UpdateQuery(strSqlStmt))
            bResult = true;
        
        // Retorna el Resultado
        return bResult;
        
    }
    
    private boolean fnBoolActualizaFolioVenta()
    {
        // Para controlar el Resultado
        boolean bResult = false;
        
        // Para la sentencia Sql
        String strSqlStmt; // Para el Query
        
        // Query para actualizar el Folio
        strSqlStmt = "UPDATE Folios SET FVenta = FVenta + 1";
        
        // Ejecuta la Sentencia
        if (con.UpdateQuery(strSqlStmt))
            bResult = true;
        
        // Retorna el Resultado
        return bResult;
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBuscar;
    private javax.swing.JButton bCobrar;
    private javax.swing.JButton bImprimir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lTicket;
    private javax.swing.JLabel lblUtilidad;
    private javax.swing.JTable tablaVenta;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JLabel txtPago;
    private javax.swing.JLabel txtTotalPro;
    private javax.swing.JLabel txtVenta;
    // End of variables declaration//GEN-END:variables
}
